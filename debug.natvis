<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="nlohmann::basic_json&lt;*&gt;">
        <DisplayString Condition="m_type == nlohmann::detail::value_t::null">null</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::object">{*(m_value.object)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::array">{*(m_value.array)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::string">{*(m_value.string)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::boolean">{m_value.boolean}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_integer">{m_value.number_integer}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_unsigned">{m_value.number_unsigned}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_float">{m_value.number_float}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::discarded">discarded</DisplayString>
        <Expand>
            <ExpandedItem Condition="m_type == nlohmann::detail::value_t::object">
                *(m_value.object),view(simple)
            </ExpandedItem>
            <ExpandedItem Condition="m_type == nlohmann::detail::value_t::array">
                *(m_value.array),view(simple)
            </ExpandedItem>
        </Expand>
    </Type>
    <Type Name="std::pair&lt;*, nlohmann::basic_json&lt;*&gt;&gt;" IncludeView="MapHelper">
        <DisplayString>{second}</DisplayString>
        <Expand>
            <ExpandedItem>second</ExpandedItem>
        </Expand>
    </Type>
    <Type Name="std::shared_ptr&lt;*&gt;">
        <DisplayString Condition="_Ptr == 0">empty</DisplayString>
        <DisplayString Condition="_Ptr != 0">{*_Ptr}</DisplayString>
        <Expand>
            <ExpandedItem>_Ptr</ExpandedItem>
        </Expand>
    </Type>
    <Type Name="INodeListImpl&lt;*,*,*&gt;">
        <Expand>
            <CustomListItems MaxItemsPerView="5000" ExcludeView="Test">
                <Variable Name="iter" InitialValue="sentinel.next" />
                <Variable Name="end" InitialValue="&amp;sentinel" />
                <Loop>
                    <Break Condition="iter == end"/>
                    <Item>*(($T1 *)(iter))</Item>
                    <Exec>iter = iter->next</Exec>
                </Loop>
            </CustomListItems>
        </Expand>
    </Type>
    <Type Name="NodeIter&lt;*,*&gt;">
        <Expand>
            <Item Name="[cursor]">cursor</Item>
            <Item Name="[value]">($T2*)(cursor)</Item>
        </Expand>
    </Type>
    <Type Name="Value" Inheritable="false">
        <Expand>
            <LinkedListItems>
                <HeadPointer>users</HeadPointer>
                <NextPointer>next</NextPointer>
                <ValueNode>parent</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>
    <Type Name="Use">
        <Expand>
            <Item Name="[user]">parent</Item>
            <Item Name="[value]">value</Item>
        </Expand>
    </Type>
    <Type Name="NodeParent&lt;*,*,*&gt;" Inheritable="false">
        <Expand>
            <ExpandedItem>list</ExpandedItem>
        </Expand>
    </Type>
    <Type Name="Instruction" Inheritable="true">
        <DisplayString>{nameForDebug} = {opcode}({numOperands}) </DisplayString>
        <Expand>
            <Item Name="[opcode]">opcode</Item>
            <Item Name="[parent]">parent</Item>
            <IndexListItems>
                <Size>numOperands</Size>
                <ValueNode>*(trailingOperands._Mypair._Myval2[$i].value)</ValueNode>
            </IndexListItems>
<!--
            <ArrayItems>
                <Size>numOperands</Size>
                <ValuePointer>trailingOperands._Mypair._Myval2</ValuePointer>
            </ArrayItems>
-->
        </Expand>
    </Type>
    <Type Name="PatternNode" Inheritable="true">
        <DisplayString>{opcode}({numOperands}) </DisplayString>
        <Expand>
            <Item Name="[opcode]">(Pattern::Opcode) opcode</Item>
            <Item Name="[numOperands]">numOperands</Item>
            <ExpandedItem Condition="opcode == Pattern::Address">*(Address*)(this)</ExpandedItem>
            <ExpandedItem Condition="opcode == Pattern::BlockAddress">*(BlockAddress*)(this)</ExpandedItem>
            <ExpandedItem Condition="opcode == Pattern::Constant">*(ConstantNode*)(this)</ExpandedItem>
            <ExpandedItem Condition="opcode == Pattern::PhyRegister">*(PhyRegNode*)(this)</ExpandedItem>
            <ExpandedItem Condition="opcode == Pattern::VirRegister">*(VirRegNode*)(this)</ExpandedItem>
            <ArrayItems>
                <Size>numOperands</Size>
                <ValuePointer>((PatternUse *)(this) - numOperands)</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="PatternUse">
        <Expand>
            <Item Name="[User]">parent</Item>
            <ExpandedItem>*value</ExpandedItem>
<!--            <Item Name="[value]">value</Item>-->
        </Expand>
    </Type>
    <Type Name="Register">
        <DisplayString Condition="(regId == 0xffffffff)">{{ Invalid }}</DisplayString>
        <DisplayString Condition="((regId &amp; 0xffff0000) == 0x10000)">{{ VirReg: {regId &amp; 0xffff} }}</DisplayString>
        <DisplayString Condition="((regId &amp; 0x10000) == 0)">{{ PhyReg:{regId &amp; 0xffff} }}</DisplayString>
        <Expand>
            <Item Name="[RegNo]">regId &amp; 0xffff</Item>
            <Item Name="[IsVirReg]">((regId &amp; 0x10000) == 0x10000)</Item>
        </Expand>
    </Type>


</AutoVisualizer>
