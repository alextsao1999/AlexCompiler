target ARM {
  // Define registers
  register ireg : i32 { SP, R0, R1, R2, R3, R4, R5, R6, R7 }
  register freg : f32 { F0, F1, F2, F3, F4, F5, F6, F7 }

  // Define the machine instructions
  instructions {
    ireg: add_rr(ireg, ireg);
    ireg: sub_rr(ireg, ireg);
    ireg: mul_rr(ireg, ireg);
    ireg: div_rr(ireg, ireg);
    ireg: mod_rr(ireg, ireg);
    ireg: neg_rr(ireg);
    ireg: not_rr(ireg);
    ireg: and_rr(ireg, ireg);
    ireg: or_rr(ireg, ireg);
    ireg: xor_rr(ireg, ireg);
    ireg: addmul_rrr(ireg, ireg, ireg);
    push_r(ireg);
    pop_r(ireg);
    mov_rr(ireg, ireg);
  }

  // Define the rewriter patterns
  patterns {
    // add sub mul div
    Add($1, $2) = add_rr(ireg: $1, ireg: $2);
    Sub($1, $2) = sub_rr($1, $2);
    Mul($1, $2) = mul_rr($1, $2);
    Div($1, $2) = div_rr($1, $2);
    Add($1, ireg:$2 Mul(ireg, ireg)) = addmul_rrr($1, $2, $3);
  }


}
